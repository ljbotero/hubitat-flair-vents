@Grab('org.spockframework:spock-core:2.3-groovy-3.0')
@Grab('org.codehaus.groovy:groovy-json:3.0.9')
import spock.lang.Specification
import groovy.json.JsonOutput
import groovy.json.JsonSlurper
import java.math.BigDecimal

/**
 * Test aggressive decimal precision fixing for Hubitat environment
 * These tests validate the enhanced cleanDecimalForJson function that handles
 * Hubitat's BigDecimal serialization issues more aggressively.
 */
class DecimalPrecisionFixTest extends Specification {

    // Enhanced cleanDecimalForJson function with aggressive precision control
    def cleanDecimalForJsonEnhanced(def value) {
        if (value == null || value == 0) return 0
        
        try {
            // Convert to String first to break BigDecimal precision chain
            def stringValue = value.toString()
            def doubleValue = Double.parseDouble(stringValue)
            
            // Handle edge cases
            if (!Double.isFinite(doubleValue)) {
                return 0.0d
            }
            
            // Apply aggressive rounding to exactly 10 decimal places
            def multiplier = 1000000000.0d  // 10^9 for 10 decimal places
            def rounded = Math.round(doubleValue * multiplier) / multiplier
            
            // Ensure we return a clean Double, not BigDecimal
            return Double.valueOf(rounded)
        } catch (Exception e) {
            return 0.0d
        }
    }

    def "enhanced function should handle excessive BigDecimal precision correctly"() {
        given: "BigDecimal values with excessive precision like Hubitat creates"
        def problematicCooling = new BigDecimal("0.7565031865619353798895421013423648241063427314927104497175")
        def problematicHeating = new BigDecimal("0.4380625000000000071016808361923900918589158077810090062063875")
        
        when: "We process them with the enhanced function"
        def cleanedCooling = cleanDecimalForJsonEnhanced(problematicCooling)
        def cleanedHeating = cleanDecimalForJsonEnhanced(problematicHeating)
        
        and: "Create export data structure like the real app"
        def exportData = [
            globalRates: [
                maxCoolingRate: cleanedCooling,
                maxHeatingRate: cleanedHeating
            ]
        ]
        def jsonString = JsonOutput.toJson(exportData)
        
        then: "The JSON should not contain excessive precision"
        !jsonString.contains("7565031865619353798895421013423648241063427314927104497175")
        !jsonString.contains("4380625000000000071016808361923900918589158077810090062063875")
        
        and: "Values should be properly rounded to 10 decimal places or less"
        def parsedJson = new JsonSlurper().parseText(jsonString)
        def coolingString = parsedJson.globalRates.maxCoolingRate.toString()
        def heatingString = parsedJson.globalRates.maxHeatingRate.toString()
        
        def coolingDecimalIndex = coolingString.indexOf('.')
        def coolingDecimalPlaces = coolingDecimalIndex >= 0 ? coolingString.length() - coolingDecimalIndex - 1 : 0
        
        def heatingDecimalIndex = heatingString.indexOf('.')
        def heatingDecimalPlaces = heatingDecimalIndex >= 0 ? heatingString.length() - heatingDecimalIndex - 1 : 0
        
        coolingDecimalPlaces <= 10
        heatingDecimalPlaces <= 10
        
        println "Enhanced cleaned cooling rate: ${coolingString} (${coolingDecimalPlaces} decimal places)"
        println "Enhanced cleaned heating rate: ${heatingString} (${heatingDecimalPlaces} decimal places)"
        println "Generated JSON: ${jsonString}"
    }

    def "should produce clean JSON even with nested BigDecimal structures"() {
        given: "A complex data structure like the real export with nested BigDecimals"
        def complexData = [
            exportMetadata: [
                version: "0.22",
                exportDate: "2025-06-26T14:18:10Z",
                structureId: "58538"
            ],
            efficiencyData: [
                globalRates: [
                    maxCoolingRate: cleanDecimalForJsonEnhanced(new BigDecimal("0.7565031865619353798895421013423648241063427314927104497175")),
                    maxHeatingRate: cleanDecimalForJsonEnhanced(new BigDecimal("0.4380625000000000071016808361923900918589158077810090062063875"))
                ],
                roomEfficiencies: [
                    [
                        roomId: "room-12345",
                        roomName: "Living Room",
                        ventId: "vent-67890",
                        coolingRate: cleanDecimalForJsonEnhanced(new BigDecimal("0.18943916179511408322042027195788449094053727672567920810294705804073867372851908324254885014788632502773678107758190274582296724635023208310983458710448020588621023460956863815772026881888292929099538870519467295978878988298021558336748980002808140112812456892912180187825426287882064176693578043875166121501525891878693678857793198910101629958897201177582116241721188873102002545931475490813706278040341443132501643636221184956892614644844974173926889312392923846251175497543471502956021288138924298669599398950881404568846552757135111507774796379984663439318794261035604561500003871555174186250169105352295822305612645975404785655179773191086298692029490600067199405823805697739427745704789401678161704511882801931332775395804552668936181869061483271632824088908558185654809226016898991253650226387983535964053440756001562101165052264048138691020619443041099747210274048394012834312271934991470827991436430687139590210073616989015147900660709337769044103832411671224529001186530310256444193973612448102549392739905187626590150829620638741581963435589648465440994128701854201642118294547762609898067091247272844540364873965499783434493763593779103944920838524868965039359261027879529528832224846766310632548238257375295915760487557406877873255066788950922437102911248691118951125400216628154752778202594704463136645206176930662671812659217622983438353600005071820893376171555694919015879806891539913851226084201488846699230975914970502022557512613023746997758918305316497880508896446920614881544813504471937407836242789710023346290961066858070486007507442854485028261760684313310886336750440348040460315518250268115234742088369789233592811890246082414880221244922084086071211386525538397206827215971283883059095731010094759071101477295064135161824446035844992725682267627348130678566207052426761947572231292724609375")),
                        heatingRate: cleanDecimalForJsonEnhanced(new BigDecimal("0.093883425826417935045058992508023823682310021717530385645990854739696291795418416631700633156468403590799624343587755965421366622092879986630758425155615184449407750526428686929690294025042585105450231200499934358372490011535915073686049729357698236053062621355598923948408120310250069495687502992449743338900891941096347553565907065678228112849165715669609813425302591209370880277914176029939547777725687506415268607331885103429860090448248738325926670386965581054614232444482949997111504750533390271724933799781817035048874285943107300023767947583215944620144925310656611963558678418465228567519733974418723449901525813087144375886747305513273621447134756988853758127520878362100207650521644056513897251893968662313983099364496016093870737137432663284772869061011967740388974188362129889559731563588862136040017987106646306507460830296837228525580638565485175302562994727693828805445976721604152306727222037539223977459889041743002707158394713880937183231361626441335983095482305609538553809207551102118203385338068580849317714278807328329898604591235930693145102274402869286206231163429089770153890799083119281093377113319795392504674477547225542478007750407804896263759193177698143883807479889660703408582118746585014230592281560306537092140101514112727162508785531586973743330173172534225815004710685940473638397532067600634598878382948999781098826271320434760401181850440829834032197914759154433314988141097577553491025125212786284268866850283429649569888247708528962636057977612731967957594879635994810308095759969488417093496398224957578111395830754529384696057750274686196399733327075269314244116885444158472064453581626621101385295770232718159942209013024694286286830902099609375"))
                    ]
                ]
            ]
        ]
        
        when: "We serialize to JSON"
        def jsonString = JsonOutput.toJson(complexData)
        
        then: "The JSON should be clean without excessive precision anywhere"
        !jsonString.contains("7565031865619353798895421013423648241063427314927104497175")
        !jsonString.contains("4380625000000000071016808361923900918589158077810090062063875")
        !jsonString.contains("18943916179511408322042027195788449094053727672567920810294705804073867372851908324254885014788632502773678107758190274582296724635023208310983458710448020588621023460956863815772026881888292929099538870519467295978878988298021558336748980002808140112812456892912180187825426287882064176693578043875166121501525891878693678857793198910101629958897201177582116241721188873102002545931475490813706278040341443132501643636221184956892614644844974173926889312392923846251175497543471502956021288138924298669599398950881404568846552757135111507774796379984663439318794261035604561500003871555174186250169105352295822305612645975404785655179773191086298692029490600067199405823805697739427745704789401678161704511882801931332775395804552668936181869061483271632824088908558185654809226016898991253650226387983535964053440756001562101165052264048138691020619443041099747210274048394012834312271934991470827991436430687139590210073616989015147900660709337769044103832411671224529001186530310256444193973612448102549392739905187626590150829620638741581963435589648465440994128701854201642118294547762609898067091247272844540364873965499783434493763593779103944920838524868965039359261027879529528832224846766310632548238257375295915760487557406877873255066788950922437102911248691118951125400216628154752778202594704463136645206176930662671812659217622983438353600005071820893376171555694919015879806891539913851226084201488846699230975914970502022557512613023746997758918305316497880508896446920614881544813504471937407836242789710023346290961066858070486007507442854485028261760684313310886336750440348040460315518250268115234742088369789233592811890246082414880221244922084086071211386525538397206827215971283883059095731010094759071101477295064135161824446035844992725682267627348130678566207052426761947572231292724609375")
        
        def parsedJson = new JsonSlurper().parseText(jsonString)
        
        // Verify all decimal values are reasonable
        def coolingRate = parsedJson.efficiencyData.globalRates.maxCoolingRate.toString()
        def heatingRate = parsedJson.efficiencyData.globalRates.maxHeatingRate.toString()
        def roomCoolingRate = parsedJson.efficiencyData.roomEfficiencies[0].coolingRate.toString()
        def roomHeatingRate = parsedJson.efficiencyData.roomEfficiencies[0].heatingRate.toString()
        
        [coolingRate, heatingRate, roomCoolingRate, roomHeatingRate].each { rateString ->
            def decimalIndex = rateString.indexOf('.')
            def decimalPlaces = decimalIndex >= 0 ? rateString.length() - decimalIndex - 1 : 0
            assert decimalPlaces <= 10
        }
        
        println "Complex data JSON length: ${jsonString.length()}"
        println "All rates have <= 10 decimal places"
    }

    def "should handle edge cases without errors"() {
        expect: "Edge cases to be handled gracefully"
        cleanDecimalForJsonEnhanced(null) == 0
        cleanDecimalForJsonEnhanced(0) == 0
        cleanDecimalForJsonEnhanced(0.0) == 0
        cleanDecimalForJsonEnhanced("invalid") == 0
        cleanDecimalForJsonEnhanced(Double.NaN) == 0
        cleanDecimalForJsonEnhanced(Double.POSITIVE_INFINITY) == 0
        cleanDecimalForJsonEnhanced(Double.NEGATIVE_INFINITY) == 0
    }

    def "should preserve reasonable precision for normal values"() {
        expect: "Normal values to maintain appropriate precision"
        def result1 = cleanDecimalForJsonEnhanced(0.123456789012345)
        def result2 = cleanDecimalForJsonEnhanced(1.987654321098765)
        
        // Values should be close to originals but with limited precision
        Math.abs(result1 - 0.123456789012345) < 0.0000000001
        Math.abs(result2 - 1.987654321098765) < 0.0000000001
        
        // Convert to string to check decimal places
        def string1 = result1.toString()
        def string2 = result2.toString()
        
        def decimal1 = string1.indexOf('.')
        def decimal2 = string2.indexOf('.')
        
        def places1 = decimal1 >= 0 ? string1.length() - decimal1 - 1 : 0
        def places2 = decimal2 >= 0 ? string2.length() - decimal2 - 1 : 0
        
        places1 <= 10
        places2 <= 10
    }
}
